version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smartdoc_postgres
    environment:
      POSTGRES_DB: smartdoc
      POSTGRES_USER: smartdoc_user
      POSTGRES_PASSWORD: smartdoc_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartdoc_user -d smartdoc"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: smartdoc_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Main FastAPI application
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: smartdoc_web
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./static:/app/static
      - ./logs:/app/logs
      - ./chroma_db:/app/chroma_db
    environment:
      DATABASE_URL: postgresql://smartdoc_user:smartdoc_password@postgres:5432/smartdoc
      REDIS_URL: redis://redis:6379
      SECRET_KEY: your-super-secret-key-change-this-in-production
      DEBUG: "False"
      ENVIRONMENT: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Celery worker for background tasks
  celery-worker:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: smartdoc_celery_worker
    command: python -m celery -A celery_app worker --loglevel=info --concurrency=2
    volumes:
      - ./uploads:/app/uploads
      - ./static:/app/static
      - ./logs:/app/logs
      - ./chroma_db:/app/chroma_db
    environment:
      DATABASE_URL: postgresql://smartdoc_user:smartdoc_password@postgres:5432/smartdoc
      REDIS_URL: redis://redis:6379
      SECRET_KEY: your-super-secret-key-change-this-in-production
      C_FORCE_ROOT: "1"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "from celery_app import celery_app; print('OK') if celery_app.control.inspect().stats() else exit(1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Celery beat for scheduled tasks
  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: smartdoc_celery_beat
    command: python -m celery -A celery_app beat --loglevel=info --scheduler=celery.beat:PersistentScheduler
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    environment:
      DATABASE_URL: postgresql://smartdoc_user:smartdoc_password@postgres:5432/smartdoc
      REDIS_URL: redis://redis:6379
      SECRET_KEY: your-super-secret-key-change-this-in-production
      C_FORCE_ROOT: "1"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  celery_beat_data:
    driver: local

networks:
  default:
    name: smartdoc_network